exports.id = "main";
exports.modules = {

/***/ "./src/server/server.js":
/*!******************************!*\
  !*** ./src/server/server.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var babel_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! babel-polyfill */ \"babel-polyfill\");\n/* harmony import */ var babel_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(babel_polyfill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _build_contracts_FlightSuretyApp_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../build/contracts/FlightSuretyApp.json */ \"./build/contracts/FlightSuretyApp.json\");\nvar _build_contracts_FlightSuretyApp_json__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../build/contracts/FlightSuretyApp.json */ \"./build/contracts/FlightSuretyApp.json\", 1);\n/* harmony import */ var _config_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.json */ \"./src/server/config.json\");\nvar _config_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./config.json */ \"./src/server/config.json\", 1);\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3 */ \"web3\");\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(web3__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! express */ \"express\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n // Define workspace variables\n\nvar network = 'localhost';\nvar config = _config_json__WEBPACK_IMPORTED_MODULE_2__[network];\nvar web3 = new web3__WEBPACK_IMPORTED_MODULE_3___default.a(new web3__WEBPACK_IMPORTED_MODULE_3___default.a.providers.WebsocketProvider(config.url.replace('http', 'ws')));\nvar flightSuretyApp = new web3.eth.Contract(_build_contracts_FlightSuretyApp_json__WEBPACK_IMPORTED_MODULE_1__.abi, config.appAddress);\nvar oracles = [];\nvar ORACLES_COUNT = 20,\n    FIRST_ORACLE_ADDRESS = 20,\n    LAST_ORACLE_ADDRESS = 40;\nweb3.eth.getAccounts().then(function (accounts) {\n  // Make sure there enough accounts to support your oracles\n  if (accounts.length < ORACLES_COUNT) {\n    console.log('\\nServer Error - Not enough accounts to support oracles...\\n' + 'You need at least ' + ORACLES_COUNT + ' to power up the oracles server.');\n    return; //abort server\n  } // Register 20 oracles\n\n\n  console.log('Ganache returned ' + accounts.length + ' accounts.');\n  console.log('Server will use only ' + ORACLES_COUNT + ' of these accounts for oracles.');\n  console.log('Starting from accounts[' + FIRST_ORACLE_ADDRESS + '] for the first oracle.');\n  console.log('Ending at accounts[' + LAST_ORACLE_ADDRESS + '] for the last oracle.'); // Initialize oracles addresses and indexes with smart contract\n\n  flightSuretyApp.methods.REGISTRATION_FEE().call({\n    \"from\": accounts[0],\n    \"gas\": 5000000,\n    \"gasPrice\": 100000000000\n  }).then(function (fee) {\n    console.log('Smart Contract requires (' + fee + ') wei to fund oracle registration.');\n\n    var _loop = function _loop() {\n      var account = accounts[a];\n      oracles.push(account); //To keep the server updated with oracles addresses \n      //Because sometimes the oracle is already registered in the contract from before, \n      //so it reverts when the server tries to register it again.\n\n      console.log('About to register oracle: ' + account);\n      flightSuretyApp.methods.registerOracle().send({\n        \"from\": account,\n        \"value\": fee,\n        \"gas\": 5000000,\n        \"gasPrice\": 100000000000\n      }).then(function (result) {\n        //oracle created;\n        console.log('Registered: ' + account);\n      })[\"catch\"](function (err) {\n        // oracle errored\n        console.log('Could not create oracle at address: ' + account + '\\n\\tbecause: ' + err);\n      });\n    };\n\n    for (var a = FIRST_ORACLE_ADDRESS; a < LAST_ORACLE_ADDRESS; a++) {\n      _loop();\n    } //end for loop\n    // Display oracles addresses and indexes previously retrieved from smart contract\n\n\n    oracles.forEach(function (oracle) {\n      flightSuretyApp.methods.getMyIndexes().call({\n        \"from\": oracle,\n        \"gas\": 5000000,\n        \"gasPrice\": 100000000000\n      }).then(function (result) {\n        console.log('Assigned Indices: ' + result[0] + ', ' + result[1] + ', ' + result[2] + '\\tfor oracle: ' + oracle);\n      })[\"catch\"](function (error) {\n        console.log('Could not retrieve oracle indices because: ' + error);\n      });\n    }); //end forEach oracle*/\n\n    console.log('Oracles server all set-up...\\nOracles registered and assigned addresses...');\n    console.log('Listening to a request event...'); //Listen for oracleRequest event\n\n    flightSuretyApp.events.OracleRequest({\n      fromBlock: 'latest'\n    }, function (error, event) {\n      if (error) console.log(error);\n      console.log('Caught an event: ');\n      var eventResult = event['returnValues'];\n      console.log(eventResult);\n      var index = eventResult['index'];\n      var airline = eventResult['airline'];\n      var flight = eventResult['flight'];\n      var timestamp = eventResult['departureTime']; //In real-life scenarios, \n      //timestamp is needed to determine flight status near timestamp\n      //But it will be ignored here since this is just a simulation.\n\n      console.log('Only the oracles with index ' + index + ' should respond to the request.'); //Query the oracles with matching index for the flight status\n\n      oracles.forEach(function (oracle) {\n        flightSuretyApp.methods.getMyIndexes().call({\n          \"from\": oracle,\n          \"gas\": 5000000,\n          \"gasPrice\": 100000000000\n        }).then(function (result) {\n          //console.log('Indices: '+result[0]+', '+result[1]+', '+result[2]+'\\tfor oracle: '+oracle);\n          if (result[0] == index || result[1] == index || result[2] == index) //matching oracle -> respond with random status\n            {\n              var flightStatus = 20; // for testing only          \n              // let flightStatus = 10 * (1+Math.floor(Math.random() * 5)); \n              //                                                  /* Flight status codes\n              //                                                     STATUS_CODE_UNKNOWN = 0; //Oracles should know! - zero out.\n              //                                                     STATUS_CODE_ON_TIME = 10;\n              //                                                     STATUS_CODE_LATE_AIRLINE = 20;\n              //                                                     STATUS_CODE_LATE_WEATHER = 30;\n              //                                                     STATUS_CODE_LATE_TECHNICAL = 40;\n              //                                                     STATUS_CODE_LATE_OTHER = 50;*/\n\n              console.log('HIT- Responding with random flight status: ' + flightStatus + ' from oracle: ' + oracle); //Reply back to smart contract with the determined status code\n\n              flightSuretyApp.methods.submitOracleResponse(index, airline, flight, timestamp, flightStatus).send({\n                \"from\": oracle,\n                \"gas\": 5000000,\n                \"gasPrice\": 100000000000\n              }).then(function (result) {\n                console.log('Oracle [' + oracle + '] response submitted successfully.');\n              })[\"catch\"](function (error) {\n                console.log('Could not submit oracle response because: ' + error);\n              }); //end submitOracleResponse*/\n            } //forEach oracle\n\n        })[\"catch\"](function (error) {\n          console.log('Could not retrieve oracle indices because: ' + error);\n        });\n      }); //end forEach oracle\n    }); //*/\n  })[\"catch\"](function (err) {\n    console.log('Could not retrieve registration fee. ' + err);\n  }); //end REGISTRATION_FEE \n}); //end getAccounts\n\nvar app = express__WEBPACK_IMPORTED_MODULE_4___default()();\napp.get('/api', function (req, res) {\n  res.send({\n    message: 'An API for use with your Dapp!'\n  });\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (app);\n\n//# sourceURL=webpack:///./src/server/server.js?");

/***/ })

};